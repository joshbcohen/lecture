## Reading questions

1.  A given program spends 10% of its time in an initial startup
    phase, and then 90% of its time in work that can be easily
    parallelized.  Assuming a machine with homogeneous cores, plot the
    idealized speedup and parallel efficiency of the overall code
    according to Amdahl's law for up to 128 cores.  If you know how,
    you should use a script to produce this plot, with both the serial
    fraction and the maximum number of cores as parameters.

    ANSWER:

    - See amdahl.py and speedup.png and effiency.png


2.  Suppose a particular program can be partitioned into perfectly
    independent tasks, each of which takes time tau.  Tasks are
    set up, scheduled, and communicated to p workers at a (serial)
    central server; this takes an overhead time alpha per task.
    What is the theoretically achievable throughput (tasks/time)?

    ANSWER:

    This is a case of weak scaling. We consider the p workers as p processors. Tau is the parallelizable work, while alpha is the amount of serial work; thus, the fraction of serial work is alpha / alpha + tau. Gustafson's law states that the maximum speedup is (p - (fraction of serializable work))*(p-1) = (p - (alpha / alpha + tau))(p-1) 


3.  Under what circumstances is it best to not tune?

    ANSWER:

    - When a task is already simple or efficient enough that the time it would take to tune the code would be better spent elsewhere- for example, if we have a pleasingly parallel task, for instant, that's already running quickly, it might not be worth it to try to further optimize the parallelization 
    - When trying to tune the code will interfere with other parts of the codebase


4.  The class cluster consists of eight nodes and fifteen Xeon Phi
    accelerator boards.  Based on an online search for information on
    these systems, what do you think is the theoretical peak flop rate
    (double-precision floating point operations per second)?  Show how
    you computed this, and give URLs for where you got the parameters
    in your calculation.  (We will return to this question again after
    we cover some computer architecture.)

    ANSWER:

    https://www-ssl.intel.com/content/www/us/en/benchmarks/server/xeon-phi/xeon-phi-theoretical-maximums.html
    http://ark.intel.com/products/83352/Intel-Xeon-Processor-E5-2620-v3-15M-Cache-2_40-GHz
    http://download.intel.com/support/processors/xeon/sb/xeon_E5-2600.pdf
    15 Xeon Phi 5110P boards * 1010.88 GF/S per board + 8 nodes * 12 cores/node * 120 GF/s per core = 26683.2 GF/s
    
5.  What is the approximate theoretical peak flop rate for your own machine?

    ANSWER:

    http://ark.intel.com/products/75105/Intel-Core-i3-4005U-Processor-3M-Cache-1_70-GHz
    http://www.novatte.com/our-blog/197-how-to-calculate-peak-theoretical-performance-of-a-cpu-based-hpc-system

    I have a Dell Inspiron 5558 with a Intel Core i3-4005U Processor-

    1.7 GHz * 2 cores * 16 instructions per cycle (AVX2) = 54.4 GFLOP/s

    https://en.wikipedia.org/wiki/List_of_Intel_graphics_processing_units

    My laptop has a built-in Intel 5500 HD Graphics Card, with a max clock speed of 850 MHz = .850 GHz
    23 EUs * 4 [SIMD-4 FPU] * 2 [MUL + ADD] * .850 / 2 = 78.2 GFLOP/s

    54.4 + 78.2 = 132.6


